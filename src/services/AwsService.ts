import config from '@/config';
import logger from '@/logging';
import { BedrockRuntimeClient, ConverseCommand } from '@aws-sdk/client-bedrock-runtime';

interface PRFile {
  filename: string;
  isBinary: boolean;
  patch?: string;
}

interface PRData {
  title?: string;
  body?: string;
  files: PRFile[];
  number?: number;
}

interface AWSConfig {
  region: string;
  modelId: string;
  maxTokens: number;
  temperature: number;
}

export class AwsService {
  private client: BedrockRuntimeClient;
  private modelId: string;
  private maxTokens: number;
  private temperature: number;

  constructor() {
    const awsConfig: AWSConfig = config.getAWSConfig();

    // Initialize the Bedrock client
    this.client = new BedrockRuntimeClient({
      region: awsConfig.region,
    });

    this.modelId = awsConfig.modelId;
    this.maxTokens = awsConfig.maxTokens;
    this.temperature = awsConfig.temperature;
  }

  /**
   * Build a prompt for the AI model based on PR data
   * @param {PRData} prData - Pull request data including title, description, and files
   * @returns {string} Formatted prompt
   */
  private buildPrompt(prData: PRData): string {
    const { title, body, files } = prData;

    // Start with instructions for the AI
    let prompt = `Please review the following code changes in a pull request. Focus on code quality, security issues, performance, and style. Provide feedback as a markdown report with sections for summary and detailed comments.

PR Title: ${title || 'No title provided'}
PR Description: ${body || 'No description provided'}

Files changed:
`;

    // Add each file with its diff
    for (const file of files) {
      // Skip binary files or files that are too large
      if (file.isBinary || (file.patch && file.patch.length > 10000)) {
        prompt += `${file.filename}: [Binary file or too large to include]\n`;
        continue;
      }

      prompt += `${file.filename}:
\`\`\`
${file.patch || 'No diff available'}
\`\`\`

`;
    }

    // Add final instructions
    prompt += `
Please organize your review with these sections:
1. Summary - A brief overview of the changes and their purpose
2. Key Findings - Major issues or concerns, categorized by type (security, performance, style)
3. Recommendations - Specific suggestions for improvement

Your review should be constructive, specific, and actionable.`;

    logger.info('Built AI prompt', {
      promptLength: prompt.length,
      fileCount: files.length,
    });

    return prompt;
  }

  /**
   * Invoke the AI model with the given prompt
   * @param {string} prompt - The prompt to send to the model
   * @returns {Promise<string>} The model's response
   */
  private async invokeModel(prompt: string): Promise<string> {
    try {
      logger.info('Invoking Bedrock model', {
        modelId: this.modelId,
        promptLength: prompt.length,
      });

      // Record metric for AI call attempt
      logger.recordMetric('aiCallsMade');

      // Create the command for Titan Text model using the Converse API
      const command = new ConverseCommand({
        modelId: this.modelId,
        messages: [
          {
            role: 'user',
            content: [{ text: prompt }],
          },
        ],
        inferenceConfig: {
          maxTokens: this.maxTokens,
          temperature: this.temperature,
        },
      });

      // Send the command to Bedrock
      const response = await this.client.send(command);

      // Extract the text from the response
      const content = response?.output?.message?.content ?? [];
      const aiContent = content[0]?.text ?? '';

      // Record success metric
      logger.recordMetric('aiCallsSucceeded');

      logger.info('Received Bedrock response', {
        responseLength: aiContent.length,
      });

      return aiContent;
    } catch (error) {
      const errorMessage = error instanceof Error ? error : 'Unknown error';

      logger.recordMetric('aiCallsFailed');

      logger.error('Failed to invoke Bedrock model', {
        error: errorMessage,
        modelId: this.modelId,
      });

      throw error;
    }
  }

  /**
   * Format the AI response into a well-structured markdown review comment
   * @param {string} aiResponse - Raw response from the AI model
   * @param {PRData} prData - Pull request data for context
   * @returns {string} Formatted markdown review
   */
  private formatReviewComment(aiResponse: string, prData: PRData): string {
    // Add a header to the review
    const formattedReview = `## Automated Code Review

${aiResponse}

---
*Review generated by AI-Powered PR Review Extension using Amazon Bedrock*`;

    return formattedReview;
  }

  /**
   * Perform a complete code review on a pull request
   * @param {PRData} prData - Pull request data including title, description, and files
   * @returns {Promise<string>} Formatted review comment
   */
  public async reviewPullRequest(prData: PRData): Promise<string> {
    try {
      // Build the prompt
      const prompt = this.buildPrompt(prData);

      // Invoke the model
      const aiResponse = await this.invokeModel(prompt);

      // Format the response
      const formattedReview = this.formatReviewComment(aiResponse, prData);

      return formattedReview;
    } catch (error) {
      const errorMessage = error instanceof Error ? error : 'Unknown error';

      logger.error('Failed to review pull request', {
        error: errorMessage,
        prNumber: prData.number,
      });

      // Return a fallback message
      return `## Automated Code Review

I encountered an error while trying to review this pull request. Please try again later or contact the administrator.

Error: ${errorMessage}

---
*AI-Powered PR Review Extension*`;
    }
  }
}
